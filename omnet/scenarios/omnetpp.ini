[General]
#network = Mysteriocase

# scene visualization
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = false

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = false #o arco
*.visualizer.*.mobilityVisualizer.displayVelocities = true #a seta.
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true #os rastros
*.visualizer.*.mobilityVisualizer.animationSpeed = 1

# mobility constraint area
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 3000m
**.constraintAreaMaxY = 3000m
**.constraintAreaMaxZ = 3000m

# no configurator needed (there is no communication between hosts)
**.networkConfiguratorModule = ""

[Config Mysterio_ex1]
description = "Implementação - Mysterio"
network = MysterioCommunication
*.host[*].mobility.numeroDrones = 10
*.numHosts = 10
*.host[*].osgModel = "3d/drone.ive.100.scale.0,0,90.rot"

*.canvasVisualizer.energyStorageVisualizer.displayEnergyStorages = true #

*.host[*].hasStatus = true #

# power
*.host[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.host[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.host[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.host[*].energyStorage.nominalCapacity = 0.05J
*.host[*].energyManagement.nodeShutdownCapacity = 0.1 * energyStorage.nominalCapacity
*.host[*].energyManagement.nodeStartCapacity = 0.5 * energyStorage.nominalCapacity
*.host[*].energyStorage.initialCapacity = 0.05J #uniform(0.1 * energyStorage.nominalCapacity, energyStorage.nominalCapacity)
*.host[*].energyGenerator.typename = "AlternatingEpEnergyGenerator"
*.host[*].energyGenerator.powerGeneration = 4mW
*.host[*].energyGenerator.sleepInterval = exponential(25s)
*.host[*].energyGenerator.generationInterval = exponential(25s)

*.host[*].mobility.typename = "UAVMobility"
*.host[*].mobility.changeInterval = 1s
*.host[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
*.host[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
*.host[*].mobility.angleDelta = uniform(-10deg,10deg)
*.host[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
*.host[*].mobility.speed = uniform(10mps,20mps)
*.host[*].mobility.faceForward = false
**.constraintAreaMinZ = 200m

[Config Mysterio_ex2]
description = "Implementação - Mysterio2"
network = MysterioCommunication2
*.host[*].mobility.numeroDrones = 2
*.numHosts = 2
#*.host[0].osgModel = "3d/car.ive.100.scale.0,0,90.rot"
#drone.ive
*.host[*].osgModel = "3d/drone.ive.100.scale.0,0,90.rot"
*.basestation.osgModel = "3d/car.ive.50.scale.0,0,90.rot"

#*.host[0].modelURL = "cow.osgb.2.scale.0,0,90.rot.0,0,-15e-1.trans"

*.canvasVisualizer.energyStorageVisualizer.displayEnergyStorages = true #

*.host[*].hasStatus = true #

# power
*.host[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.host[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.host[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.host[*].energyStorage.nominalCapacity = 0.05J
*.host[*].energyManagement.nodeShutdownCapacity = 0.1 * energyStorage.nominalCapacity
*.host[*].energyManagement.nodeStartCapacity = 0.5 * energyStorage.nominalCapacity
*.host[*].energyStorage.initialCapacity = 0.05J #uniform(0.1 * energyStorage.nominalCapacity, energyStorage.nominalCapacity)
*.host[*].energyGenerator.typename = "AlternatingEpEnergyGenerator"
*.host[*].energyGenerator.powerGeneration = 4mW
*.host[*].energyGenerator.sleepInterval = exponential(25s)
*.host[*].energyGenerator.generationInterval = exponential(25s)

*.host[*].mobility.typename = "UAVMobility"
*.host[*].mobility.changeInterval = 1s
*.host[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
*.host[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
*.host[*].mobility.angleDelta = uniform(-10deg,10deg)
*.host[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
*.host[*].mobility.speed = uniform(10mps,20mps)
*.host[*].mobility.faceForward = false
*.host[*].mobility.initialX = 220m
*.host[*].mobility.initialY = 220m
*.host[*].mobility.initialZ = 80m

#**.constraintAreaMinZ = 200m